[gd_scene load_steps=5 format=3 uid="uid://b7ah13672ulr8"]

[ext_resource type="Script" path="res://ships/selected_shader/selected_shader.gd" id="1_hng4y"]

[sub_resource type="Shader" id="Shader_yg06u"]
code = "// Flashing Shader
// Overlays/Mixes between an animated color A and color B (alpha of each controls mix amount)
shader_type canvas_item;

// Color A: grey by default
uniform vec4 color_a:source_color = vec4(0.7, 0.7, 0.7, 1.0);

// Color B: White by default
uniform vec4 color_b:source_color = vec4(1.0, 1.0, 1.0, 1.0);

// if enabled, color_a and color_b alpha will affect transparency
uniform bool colors_affect_alpha = false;

// Whether to enable the animation or simply mix in color_a only
uniform float flash_amount:hint_range(0.0, 1.0, 0.1) = 1.0;

// if flash_amount is true, flash_speed controls the speed of the animation between color_a and color_b
uniform float flash_speed = 1.0;

// transparency, like modulate
uniform float transparency:hint_range(0.0, 1.0, 0.01) = 1.0;

// Intensity of the shader
uniform float intensity:hint_range(0.0, 1.0, 0.1) = 1.0;


float anim() {
	return (sin(TIME * flash_speed) + 1.0) / 2.0;
}

// returns a mix between color_a and color_b, based on TIME
// see the anim() function
vec4 get_shader_color() {
	if (flash_amount > 0.0) {
		float f = anim();
		return mix(color_a, color_b, f * flash_amount);
	}else {
		return color_a;
	}
}

void fragment() {
	// get input color and alpha from the texture
	vec4 in_color = texture(TEXTURE, UV);
	float in_alpha = in_color.a;

	// get the shader color (some mix between color_a and color_b)
	vec4 shader_rgba = get_shader_color();
	vec3 shader_color = shader_rgba.rgb;
	float shader_alpha = shader_rgba.a;

	// rgb color mixes between in_color and shader_color * by shader_alpha
	// this way, color_a can have a different \"intensity\" than color_b
	//
	// wrap in vec4 and plug in the in_alpha since we don't generally want to retain that from the texture
	vec4 out_color = vec4(mix(in_color.rgb, shader_color, shader_alpha), in_alpha);

	// if affect_alpha is true, we will modulate transparency by our color_a/b
	if (colors_affect_alpha) {
		out_color.a = in_alpha * shader_alpha;
	}

	out_color.a *= transparency;

	// finally, use mix to control intensity of the entire effect
	COLOR = mix(in_color, out_color, intensity);
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_csi4d"]
resource_local_to_scene = true
shader = SubResource("Shader_yg06u")
shader_parameter/color_a = Color(1, 1, 1, 1)
shader_parameter/color_b = Color(1, 1, 1, 0.815686)
shader_parameter/colors_affect_alpha = true
shader_parameter/flash_amount = 1.0
shader_parameter/flash_speed = 5.0
shader_parameter/transparency = 0.3
shader_parameter/intensity = 1.0

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_b12hb"]
load_path = "res://.godot/imported/Ships.png-a79435ddc1b1eeee2f87818eaaed4e55.ctex"

[node name="selected_shader" type="Sprite2D"]
texture_filter = 1
material = SubResource("ShaderMaterial_csi4d")
position = Vector2(11, 0)
scale = Vector2(1.65, 1.65)
texture = SubResource("CompressedTexture2D_b12hb")
hframes = 8
vframes = 2
script = ExtResource("1_hng4y")
